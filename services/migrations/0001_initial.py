# Generated by Django 5.1.4 on 2025-01-09 18:35

import django.core.validators
import django.db.models.deletion
import services.utils
import tinymce.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Категория организации',
                'verbose_name_plural': 'Категории организаций',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ConflictAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization_name', models.CharField(max_length=80, verbose_name='Название организации')),
                ('organization_director_full_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='ФИО директора организации')),
                ('organization_director_position', models.CharField(blank=True, max_length=80, null=True, verbose_name='Должность директора организации')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Описание')),
                ('additional_description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Дополнительное описание')),
                ('filled_date', models.DateField(blank=True, null=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'About existing conflicts of interest (notification)'), (2, "About the employee's possible conflict of interest (declaration)"), (3, 'About possible conflict of interests of related persons (declaration)')], verbose_name='Тип')),
                ('employee_full_name', models.CharField(max_length=150, verbose_name='Полное имя')),
                ('employee_position', models.CharField(max_length=120, verbose_name='Позиция информатора')),
                ('employee_passport_number', models.CharField(max_length=14, verbose_name='Информатор ЖШШР')),
                ('employee_passport_series', models.CharField(max_length=9, verbose_name='Серия паспортов информатора')),
                ('employee_passport_taken_date', models.DateField(verbose_name='Дата получения паспорта')),
                ('employee_legal_entity_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Название юридического лица')),
                ('employee_legal_entity_data', models.CharField(max_length=300, verbose_name='Персональные данные сотрудников и юридических лиц')),
                ('employee_stir_number', models.CharField(blank=True, max_length=120, null=True, verbose_name='Номер STIR')),
                ('related_persons_full_name', models.CharField(max_length=150, verbose_name='Полное имя')),
                ('related_persons_passport_number', models.CharField(blank=True, max_length=14, null=True, verbose_name='Информатор ЖШШР')),
                ('related_persons_passport_series', models.CharField(blank=True, max_length=9, null=True, verbose_name='Серия паспортов информатора')),
                ('related_persons_passport_taken_date', models.DateField(blank=True, null=True, verbose_name='Дата получения паспорта')),
                ('related_persons_legal_entity_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Название юридического лица')),
                ('related_persons_stir_number', models.CharField(blank=True, max_length=120, null=True, verbose_name='Номер STIR')),
                ('related_persons_kinship_data', models.CharField(blank=True, max_length=200, null=True, verbose_name='Данные о родстве')),
            ],
            options={
                'verbose_name': 'Оповещение о конфликте',
                'verbose_name_plural': 'Оповещение о конфликте',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='CorruptionRisk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=80, verbose_name='Название')),
                ('short_desc', models.TextField(max_length=120, verbose_name='Краткое описание')),
                ('image', models.ImageField(upload_to='corruption_risk/', verbose_name='')),
                ('form_url', models.URLField(verbose_name='')),
                ('excel_url', models.URLField(verbose_name='')),
                ('start_date', models.DateTimeField(verbose_name='')),
                ('end_date', models.DateTimeField(verbose_name='')),
                ('result', tinymce.models.HTMLField(blank=True, verbose_name='Результат')),
                ('status', models.IntegerField(choices=[(1, 'In Progress'), (2, 'Closed')], default=1, verbose_name='')),
            ],
            options={
                'verbose_name': 'Риск коррупции',
                'verbose_name_plural': 'Риск коррупции',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ElectronLibraryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Категория Электронная библиотека',
                'verbose_name_plural': 'Категория Электронная библиотека',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='HonestyTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', tinymce.models.HTMLField(verbose_name='Вопрос')),
                ('advice', models.CharField(max_length=300, verbose_name='Cовет')),
            ],
            options={
                'verbose_name': 'Тест на честность',
                'verbose_name_plural': 'Тест на честность',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='HonestyTestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, verbose_name='Название категории')),
                ('image', models.ImageField(upload_to='honesty_test/category', verbose_name='')),
            ],
            options={
                'verbose_name': 'Категория тест на честность',
                'verbose_name_plural': 'Категория тест на честность',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='NewsCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория новостей',
                'verbose_name_plural': 'Категория новостей',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=80, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Профессия',
                'verbose_name_plural': 'Профессии',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ReportType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=120, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тип отчета',
                'verbose_name_plural': 'Тип отчета',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TechnicalSupport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.FileField(upload_to='technical_support/')),
                ('comment', models.TextField(max_length=300, verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Техническая поддержка',
                'verbose_name_plural': 'Техническая поддержка',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TrainingCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория обучения',
                'verbose_name_plural': 'Категория обучения',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ElectronLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=80, verbose_name='Имя')),
                ('author', models.CharField(max_length=100, verbose_name='Автор')),
                ('edition_author', models.CharField(max_length=100, verbose_name='Автор издания')),
                ('edition_type', models.CharField(max_length=100, verbose_name='Тип издания')),
                ('edition_year', models.DateField(null=True, verbose_name='Год издания')),
                ('file', models.FileField(upload_to='electron_libraries/', validators=[django.core.validators.FileExtensionValidator(['pdf'])], verbose_name='Файл книги')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.electronlibrarycategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Электронная библиотека',
                'verbose_name_plural': 'Электронные библиотеки',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='HonestyTestAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answer', models.CharField(max_length=120, verbose_name='Отвечать')),
                ('is_true', models.BooleanField(default=False, verbose_name='')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_honest', to='services.honestytest', verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'Ответ на тест на честность',
                'verbose_name_plural': 'Ответ на тест на честность',
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='honestytest',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.honestytestcategory'),
        ),
        migrations.CreateModel(
            name='HonestyTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('result', models.BooleanField(default=False, verbose_name='Результат')),
                ('percent', models.FloatField(default=0, verbose_name='процент')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.honestytestanswer', verbose_name='Ответ')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.customer', verbose_name='Клиент')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.honestytest', verbose_name='Тест')),
            ],
            options={
                'verbose_name': 'Результат честного теста',
                'verbose_name_plural': 'Результаты честного теста',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='HonestyTestStatistic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.customer', verbose_name='Клиент')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.honestytest', verbose_name='Организация')),
                ('test_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stats_test_type', to='services.honestytest', verbose_name='Тип теста')),
            ],
            options={
                'verbose_name': 'Статистика честного теста',
                'verbose_name_plural': 'Статистики честного теста',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=300, verbose_name='Заголовок')),
                ('short_description', models.CharField(max_length=150, verbose_name='Краткое описание')),
                ('description', tinymce.models.HTMLField(verbose_name='Описание')),
                ('image', models.ImageField(upload_to='news/', verbose_name='Изображение')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликован')),
                ('published_date', models.DateField(blank=True, null=True, verbose_name='Дата публикации')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='Количество просмотров')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.newscategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('phone_number', models.CharField(max_length=15, verbose_name='Номер телефона')),
                ('phone_number2', models.CharField(blank=True, max_length=15, null=True, verbose_name='Номер телефона 2')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Электронная почта')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('weblink', models.URLField(blank=True, null=True, verbose_name='Ссылка')),
                ('instagram', models.URLField(blank=True, null=True, verbose_name='Инстаграм')),
                ('telegram', models.URLField(blank=True, null=True, verbose_name='Телеграм')),
                ('facebook', models.URLField(blank=True, null=True, verbose_name='Фейсбук')),
                ('twitter', models.URLField(blank=True, null=True, verbose_name='Твиттер')),
                ('youtube', models.URLField(blank=True, null=True, verbose_name='Ютуб')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='services.categoryorganization', verbose_name='Категория')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.district', verbose_name='Область')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.region', verbose_name='Регион')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ProfessionalEthics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=300, verbose_name='Название')),
                ('description', tinymce.models.HTMLField(verbose_name='Описание')),
                ('case', models.CharField(max_length=300, verbose_name='Дилемма')),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.profession', verbose_name='Профессия')),
            ],
            options={
                'verbose_name': 'Профессиональная этика',
                'verbose_name_plural': 'Профессиональная этика',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='OfficerAdvice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField(max_length=350, verbose_name='Комментарий')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликовано')),
                ('officer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.user', verbose_name='Клиент')),
                ('professional_ethics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.professionalethics', verbose_name='Профессиональная этика')),
            ],
            options={
                'verbose_name': 'Советы клиентам',
                'verbose_name_plural': 'Советы клиентам',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('image', models.ImageField(upload_to='trainings/', verbose_name='Изображение')),
                ('description', tinymce.models.HTMLField(verbose_name='описание')),
                ('video', models.URLField(default='https://www.youtube.com/', verbose_name='URL-адрес видео на YouTube')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.trainingcategory', verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TrainingMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('filename', models.CharField(max_length=100, verbose_name='Имя файла')),
                ('file', models.FileField(blank=True, null=True, upload_to='trainings/media/', validators=[services.utils.validate_file_type_and_size], verbose_name='Файл')),
                ('video', models.URLField(blank=True, default='https://www.youtube.com/', null=True, verbose_name='URL-адрес видео на YouTube')),
                ('video_title', models.CharField(blank=True, null=True, verbose_name='Название видео')),
                ('order', models.IntegerField(verbose_name='Очередь')),
                ('type', models.CharField(choices=[('PDF', 'PDF'), ('MP4', 'MP4'), ('PPT', 'PPT')], editable=False, max_length=5, verbose_name='Тип')),
                ('training', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='training_materials', to='services.training', verbose_name='Урок')),
            ],
            options={
                'verbose_name': 'Видео урока',
                'verbose_name_plural': 'Видео уроков',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ViolationReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_time', models.DateTimeField(verbose_name='Время события')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('informant_full_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='')),
                ('informant_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='')),
                ('informant_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='')),
                ('is_anonim', models.BooleanField(default=False, verbose_name='')),
                ('district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.district', verbose_name='Округ')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.organization', verbose_name='Организация')),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.region', verbose_name='Область')),
                ('report_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.reporttype', verbose_name='Тип отчета')),
            ],
            options={
                'verbose_name': 'Отчет о нарушении',
                'verbose_name_plural': 'Отчет о нарушении',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ViolationFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to='violation_report/', verbose_name='Файл')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.violationreport', verbose_name='')),
            ],
            options={
                'verbose_name': '',
                'verbose_name_plural': '',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='GuiltyPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=100, verbose_name='')),
                ('position', models.CharField(max_length=100, verbose_name='')),
                ('phone_number', models.CharField(max_length=100, verbose_name='')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.violationreport')),
            ],
            options={
                'verbose_name': '',
                'verbose_name_plural': '',
                'ordering': ('-created_at',),
            },
        ),
    ]
